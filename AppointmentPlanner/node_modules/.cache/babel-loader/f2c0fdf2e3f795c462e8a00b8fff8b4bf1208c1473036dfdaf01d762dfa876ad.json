{"ast":null,"code":"var _jsxFileName = \"/Users/paulsondhi/Documents/Codecademy/AppointmentPlanner/Project/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /* Define state variables for contact info and duplicate check */\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicate, setDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /* Add contact info and clear data if the contact name is not a duplicate */\n    if (!duplicate) {\n      addContact(name, phone, email);\n      setName(\"\");\n      setPhone(\"\");\n      setEmail(\"\");\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"QTV3rCC0mGtXyJ3Dc6DL1OsslH8=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/paulsondhi/Documents/Codecademy/AppointmentPlanner/Project/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n   /* Define state variables for contact info and duplicate check */\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [duplicate, setDuplicate] = useState(false);\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /* Add contact info and clear data if the contact name is not a duplicate */\r\n    if (!duplicate) {\r\n      addContact(name, phone, email);\r\n      setName(\"\");\r\n      setPhone(\"\");\r\n      setEmail(\"\");\r\n    }\r\n    \r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAH,IAAA;EAClD;EACD,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMmB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;IACA,IAAI,CAACJ,SAAS,EAAE;MACdP,UAAU,CAACC,IAAI,EAAEE,KAAK,EAAEE,KAAK,CAAC;MAC9BH,OAAO,CAAC,EAAE,CAAC;MACXE,QAAQ,CAAC,EAAE,CAAC;MACZE,QAAQ,CAAC,EAAE,CAAC;IACd;EAEF,CAAC;;EAED;AACF;AACA;AACA;;EAEE,oBACEX,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,eACEjB,OAAA;QAAAiB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eACVrB,OAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNrB,OAAA;MAAAiB,QAAA,eACEjB,OAAA;QAAAiB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAAClB,EAAA,CAnCWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}